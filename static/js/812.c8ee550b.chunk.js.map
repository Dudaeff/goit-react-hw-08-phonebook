{"version":3,"file":"static/js/812.c8ee550b.chunk.js","mappings":"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","sources":["components/CommonStyles/FormList.styled.js","components/CommonStyles/ModalForm.styled.js","components/UpdateContactForm/UpdateContactForm.js","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.js","components/AddContactForm/AddContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.styled.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { colors, font } from './Variables';\nimport { Button } from './Button.styled';\n\nconst FormList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  row-gap: 15px;\n  margin-bottom: 15px;\n  margin-top: 40px;\n\n  @media screen and (min-width: 290px) {\n    align-items: center;\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 80px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    margin-top: 100px;\n  }\n`;\n\nconst FormListLabel = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  column-gap: 5px;\n\n  font-size: ${font.sizeMobile};\n\n  @media screen and (min-width: 290px) {\n    width: 220px;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${font.sizeTab};\n    column-gap: 10px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${font.sizeDesk};\n    column-gap: 15px;\n  }\n`;\n\nconst FormListInput = styled.input`\n  padding: 2px 5px;\n  max-width: 140px;\n  color: ${colors.text};\n  border-radius: 4px;\n  border: 1px solid ${colors.accent};\n  background-color: transparent;\n`;\n\nconst FormListButton = styled(Button)`\n  margin: 0 auto;\n`;\n\nexport { FormList, FormListLabel, FormListInput, FormListButton };\n","import styled from 'styled-components';\nimport { colors } from './Variables';\nimport { FormList } from './FormList.styled';\n\nconst ModalForm = styled.form`\n  width: 250px;\n  margin: 0 auto;\n  margin-top: 200px;\n  padding: 10px;\n  background-color: ${colors.background};\n  border-radius: 4px;\n\n  @media screen and (min-width: 768px) {\n    width: 300px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 350px;\n  }\n`;\n\nconst ModalFormList = styled(FormList)`\n  margin-top: 0;\n`;\n\nexport { ModalForm, ModalFormList };\n","import PropTypes from 'prop-types';\nimport { Button } from 'components/CommonStyles/Button.styled';\nimport {\n  FormListInput,\n  FormListLabel,\n} from 'components/CommonStyles/FormList.styled';\nimport {\n  ModalForm,\n  ModalFormList,\n} from 'components/CommonStyles/ModalForm.styled';\n\nexport const UpdateContactForm = ({ onSubmit }) => {\n  return (\n    <ModalForm onSubmit={onSubmit}>\n      <ModalFormList>\n        <li>\n          <FormListLabel>\n            Name:\n            <FormListInput\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            />\n          </FormListLabel>\n        </li>\n        <li>\n          <FormListLabel>\n            Number:\n            <FormListInput\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            />\n          </FormListLabel>\n        </li>\n        <li>\n          <Button type=\"submit\">Update contact</Button>\n        </li>\n      </ModalFormList>\n    </ModalForm>\n  );\n};\n\nUpdateContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\nimport { Button } from 'components/CommonStyles/Button.styled';\nimport { colors, font } from 'components/CommonStyles/Variables';\n\nconst ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  row-gap: 5px;\n\n  @media screen and (min-width: 480px) {\n    flex-direction: row;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 20px;\n  }\n`;\n\nconst ContactsListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  padding-bottom: 5px;\n  border-bottom: 1px solid ${colors.accent};\n\n  @media screen and (min-width: 430px) {\n    width: 360px;\n    margin: 0 auto;\n  }\n\n  @media screen and (min-width: 480px) {\n    flex-direction: column;\n    row-gap: 5px;\n\n    width: 200px;\n    margin: 0;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 300px;\n  }\n`;\n\nconst ContactsInfo = styled.p`\n  font-size: ${font.sizeMobile};\n\n  @media screen and (min-width: 768px) {\n    font-size: ${font.sizeTab};\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${font.sizeDesk};\n  }\n`;\n\nconst ContactWrapper = styled.div`\n  display: flex;\n  column-gap: 5px;\n\n  @media screen and (min-width: 480px) {\n    justify-content: center;\n    column-gap: 10px;\n  }\n`;\n\nconst ContactsUpdateBtn = styled(Button)`\n  width: 50px;\n  color: green;\n\n  &:hover,\n  :focus {\n    color: ${colors.text};\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 80px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 100px;\n  }\n`;\n\nconst ContactsDeleteBtn = styled(Button)`\n  width: 50px;\n  color: red;\n\n  &:hover,\n  :focus {\n    color: ${colors.text};\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 80px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 100px;\n  }\n`;\n\nexport {\n  ContactsList,\n  ContactsListItem,\n  ContactWrapper,\n  ContactsUpdateBtn,\n  ContactsDeleteBtn,\n  ContactsInfo,\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal } from '@mui/material';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useVisibleContacts } from 'hooks';\nimport { deleteContact } from 'redux/contacts';\nimport { updateContact } from 'redux/contacts/operations';\nimport { UpdateContactForm } from 'components/UpdateContactForm/UpdateContactForm';\nimport {\n  ContactsDeleteBtn,\n  ContactWrapper,\n  ContactsList,\n  ContactsListItem,\n  ContactsUpdateBtn,\n  ContactsInfo,\n} from './ContactsList.styled';\n\nconst notify = () =>\n  toast('This contact is already in your contacts!', {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'dark',\n  });\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const [contactId, setContactId] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const visibleContacts = useVisibleContacts();\n\n  useEffect(() => {\n    const onKeyClose = e => e.code === 'Escape' && setIsModalOpen(false);\n    window.addEventListener('keydown', onKeyClose);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyClose);\n    };\n  });\n\n  const handleUpdate = id => {\n    setContactId(id);\n    setIsModalOpen(true);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const form = evt.currentTarget;\n    const isAlreadyInContacts = visibleContacts.find(\n      contact =>\n        contact.name.toLowerCase() === form.elements.name.value.toLowerCase()\n    );\n\n    if (isAlreadyInContacts) return notify();\n\n    visibleContacts.forEach(({ id, name, number }) => {\n      if (id === contactId) {\n        dispatch(\n          updateContact({\n            id: contactId,\n            name: form.elements.name.value || name,\n            number: form.elements.number.value || number,\n          })\n        );\n      }\n    });\n\n    form.reset();\n    setIsModalOpen(false);\n  };\n\n  const handleClose = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <ContactsList>\n        {visibleContacts.length > 0 ? (\n          visibleContacts.map(({ id, name, number }) => {\n            return (\n              <ContactsListItem key={id}>\n                <ContactWrapper>\n                  <ContactsInfo>{name}: </ContactsInfo>\n                  <ContactsInfo>{number}</ContactsInfo>\n                </ContactWrapper>\n                <ContactWrapper>\n                  <ContactsUpdateBtn\n                    type=\"button\"\n                    onClick={() => handleUpdate(id)}\n                  >\n                    Update\n                  </ContactsUpdateBtn>\n                  <ContactsDeleteBtn\n                    type=\"button\"\n                    onClick={() => dispatch(deleteContact(id))}\n                  >\n                    Delete\n                  </ContactsDeleteBtn>\n                </ContactWrapper>\n              </ContactsListItem>\n            );\n          })\n        ) : (\n          <li>\n            <b>There is no contacts while.</b>\n          </li>\n        )}\n      </ContactsList>\n\n      <Modal open={isModalOpen} onClose={handleClose}>\n        <>\n          <UpdateContactForm onSubmit={handleSubmit} />\n        </>\n      </Modal>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addContact } from 'redux/contacts';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useContacts } from 'hooks';\nimport {\n  ModalForm,\n  ModalFormList,\n} from 'components/CommonStyles/ModalForm.styled';\nimport {\n  FormListInput,\n  FormListLabel,\n} from 'components/CommonStyles/FormList.styled';\nimport { Button } from 'components/CommonStyles/Button.styled';\n\nconst notify = () =>\n  toast('This contact is already in your contacts!', {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'dark',\n  });\n\nexport const AddContactForm = ({ closeOnSubmit }) => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n\n  const handleFormSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const isAlreadyInContacts = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === form.elements.name.value.toLowerCase()\n    );\n\n    if (isAlreadyInContacts) return notify();\n\n    dispatch(\n      addContact({\n        name: form.elements.name.value,\n        number: form.elements.number.value,\n      })\n    );\n    closeOnSubmit();\n    form.reset();\n  };\n\n  return (\n    <ModalForm onSubmit={handleFormSubmit}>\n      <ModalFormList>\n        <li>\n          <FormListLabel>\n            Name:\n            <FormListInput\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </FormListLabel>\n        </li>\n        <li>\n          <FormListLabel>\n            Number:\n            <FormListInput\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </FormListLabel>\n        </li>\n        <li>\n          <Button type=\"submit\">Add contact</Button>\n        </li>\n      </ModalFormList>\n    </ModalForm>\n  );\n};\n\nAddContactForm.propTypes = {\n  closeOnSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\nimport { FormListInput } from 'components/CommonStyles/FormList.styled';\nimport { colors, font } from 'components/CommonStyles/Variables';\n\nconst FilterWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n`;\n\nconst FilterLabel = styled.label`\n  font-size: ${font.sizeMobile};\n\n  @media screen and (min-width: 768px) {\n    font-size: ${font.sizeTab};\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${font.sizeDesk};\n  }\n`;\n\nconst FilterInput = styled(FormListInput)`\n  margin-left: 0;\n  border: 0;\n  border-bottom: 1px solid ${colors.accent};\n  border-radius: 0;\n`;\n\nexport { FilterWrapper, FilterLabel, FilterInput };\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\nimport { FilterInput, FilterLabel, FilterWrapper } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterInput = evt => {\n    dispatch(filterContacts(evt.currentTarget.value));\n  };\n\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor=\"filter\">Find contact by name</FilterLabel>\n      <FilterInput\n        placeholder=\"Type name..\"\n        type=\"text\"\n        id=\"filter\"\n        onChange={handleFilterInput}\n      />\n    </FilterWrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { Button } from 'components/CommonStyles/Button.styled';\nimport { colors, font } from 'components/CommonStyles/Variables';\n\nconst ContactsActionsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 15px;\n  margin-bottom: 20px;\n`;\n\nconst AddContactBtn = styled(Button)`\n  max-width: 150px;\n  padding: 5px 10px;\n  box-shadow: 0 0 3px ${colors.accent};\n  transition: color 250ms ease-out;\n\n  &:hover,\n  :focus {\n    color: ${colors.accent};\n  }\n\n  @media screen and (min-width: 1200px) {\n    max-width: 180px;\n  }\n`;\n\nconst ContactsTitle = styled.h2`\n  font-size: ${font.titleMobile};\n  margin-bottom: 10px;\n\n  @media screen and (min-width: 768px) {\n    font-size: ${font.titleTab};\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${font.titleDesk};\n  }\n`;\n\nexport { AddContactBtn, ContactsTitle, ContactsActionsWrapper };\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal } from '@mui/material';\nimport { useIsLoading } from 'hooks';\nimport { useError } from 'hooks';\nimport { fetchContacts } from 'redux/contacts';\nimport { ContactList } from '../components/ContactsList/ContactsList';\nimport { AddContactForm } from '../components/AddContactForm/AddContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport {\n  AddContactBtn,\n  ContactsActionsWrapper,\n  ContactsTitle,\n} from './Contacts.styled';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useIsLoading();\n  const error = useError();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const onKeyClose = e => e.code === 'Escape' && setIsModalOpen(false);\n    window.addEventListener('keydown', onKeyClose);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyClose);\n    };\n  });\n\n  const handleClose = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <ContactsActionsWrapper>\n        <Filter />\n        <AddContactBtn type=\"button\" onClick={() => setIsModalOpen(true)}>\n          Add new contact\n        </AddContactBtn>\n      </ContactsActionsWrapper>\n      <ContactsTitle>Contacts</ContactsTitle>\n      {error && <p>{error.massage}</p>}\n      {isLoading ? <p>Loading...</p> : <ContactList />}\n      <Modal open={isModalOpen} onClose={handleClose}>\n        <>\n          <AddContactForm closeOnSubmit={handleClose} />\n        </>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["FormList","styled","FormListLabel","font","FormListInput","colors","FormListButton","Button","ModalForm","ModalFormList","UpdateContactForm","onSubmit","type","name","pattern","title","ContactsList","ContactsListItem","ContactsInfo","ContactWrapper","ContactsUpdateBtn","ContactsDeleteBtn","ContactList","dispatch","useDispatch","useState","contactId","setContactId","isModalOpen","setIsModalOpen","visibleContacts","useVisibleContacts","useEffect","onKeyClose","e","code","window","addEventListener","removeEventListener","length","map","id","number","onClick","handleUpdate","deleteContact","Modal","open","onClose","evt","preventDefault","form","currentTarget","find","contact","toLowerCase","elements","value","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","forEach","updateContact","reset","AddContactForm","closeOnSubmit","contacts","useContacts","addContact","required","FilterWrapper","FilterLabel","FilterInput","Filter","htmlFor","placeholder","onChange","filterContacts","ContactsActionsWrapper","AddContactBtn","ContactsTitle","isLoading","useIsLoading","error","useError","fetchContacts","handleClose","massage"],"sourceRoot":""}