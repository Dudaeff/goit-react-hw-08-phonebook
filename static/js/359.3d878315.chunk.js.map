{"version":3,"file":"static/js/359.3d878315.chunk.js","mappings":"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","sources":["components/UpdateContactForm/UpdateContactForm.js","components/ContactList/ContactList.js","components/AddContactForm/AddContactForm.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const UpdateContactForm = ({ onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        Name\n        <input type=\"text\" name=\"name\" />\n      </label>\n      <label>\n        Number\n        <input type=\"text\" name=\"number\" />\n      </label>\n      <button type=\"submit\">Update</button>\n    </form>\n  );\n};\n\nUpdateContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal } from '@mui/material';\nimport { useVisibleContacts } from 'hooks';\nimport { deleteContact } from 'redux/contacts';\nimport { updateContact } from 'redux/contacts/operations';\nimport { UpdateContactForm } from 'components/UpdateContactForm/UpdateContactForm';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const [contactId, setContactId] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const visibleContacts = useVisibleContacts();\n\n  useEffect(() => {\n    const onKeyClose = e => e.code === 'Escape' && setIsModalOpen(false);\n    window.addEventListener('keydown', onKeyClose);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyClose);\n    };\n  });\n\n  const handleUpdate = id => {\n    setContactId(id);\n    setIsModalOpen(true);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const form = evt.currentTarget;\n    const isAlreadyInContacts = visibleContacts.find(\n      contact =>\n        contact.name.toLowerCase() === form.elements.name.value.toLowerCase()\n    );\n\n    if (isAlreadyInContacts)\n      return alert('This contact is already in your contacts.');\n\n    visibleContacts.forEach(({ id, name, number }) => {\n      if (id === contactId) {\n        dispatch(\n          updateContact({\n            id: contactId,\n            name: form.elements.name.value || name,\n            number: form.elements.number.value || number,\n          })\n        );\n      }\n    });\n\n    form.reset();\n    setIsModalOpen(false);\n  };\n\n  const handleClose = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <ul>\n        {visibleContacts &&\n          visibleContacts.map(({ id, name, number }) => {\n            return (\n              <li key={id}>\n                <p>{name}: </p>\n                <p>{number}</p>\n                <button type=\"button\" onClick={() => handleUpdate(id)}>\n                  Update\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => dispatch(deleteContact(id))}\n                >\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n      </ul>\n      <Modal open={isModalOpen} onClose={handleClose}>\n        <>\n          <UpdateContactForm onSubmit={handleSubmit} />\n        </>\n      </Modal>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addContact } from 'redux/contacts';\nimport { useContacts } from 'hooks';\n\nexport const AddContactForm = ({ closeOnSubmit }) => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n\n  const handleFormSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const isAlreadyInContacts = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === form.elements.name.value.toLowerCase()\n    );\n\n    if (isAlreadyInContacts)\n      return alert('This contact is already in your contacts.');\n\n    dispatch(\n      addContact({\n        name: form.elements.name.value,\n        number: form.elements.number.value,\n      })\n    );\n    closeOnSubmit();\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nAddContactForm.propTypes = {\n  closeOnSubmit: PropTypes.func.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterInput = evt => {\n    dispatch(filterContacts(evt.currentTarget.value));\n  };\n\n  return (\n    <label>\n      Find contact by name\n      <input type=\"text\" onChange={handleFilterInput} />\n    </label>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal } from '@mui/material';\nimport { useIsLoading } from 'hooks';\nimport { useError } from 'hooks';\nimport { fetchContacts } from 'redux/contacts';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { AddContactForm } from '../components/AddContactForm/AddContactForm';\nimport { Filter } from '../components/Filter/Filter';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useIsLoading();\n  const error = useError();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const onKeyClose = e => e.code === 'Escape' && setIsModalOpen(false);\n    window.addEventListener('keydown', onKeyClose);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyClose);\n    };\n  });\n\n  const handleClose = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <button type=\"button\" onClick={() => setIsModalOpen(true)}>\n        Add new contact\n      </button>\n      <h2>Contacts</h2>\n      <Filter />\n      {error && <p>{error.massage}</p>}\n      {isLoading ? <p>Loading...</p> : <ContactList />}\n      <Modal open={isModalOpen} onClose={handleClose}>\n        <>\n          <AddContactForm closeOnSubmit={handleClose} />\n        </>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["UpdateContactForm","onSubmit","type","name","ContactList","dispatch","useDispatch","useState","contactId","setContactId","isModalOpen","setIsModalOpen","visibleContacts","useVisibleContacts","useEffect","onKeyClose","e","code","window","addEventListener","removeEventListener","map","id","number","onClick","handleUpdate","deleteContact","Modal","open","onClose","evt","preventDefault","form","currentTarget","find","contact","toLowerCase","elements","value","alert","forEach","updateContact","reset","AddContactForm","closeOnSubmit","contacts","useContacts","addContact","pattern","title","required","Filter","onChange","filterContacts","isLoading","useIsLoading","error","useError","fetchContacts","handleClose","massage"],"sourceRoot":""}